Thomas Haraldsson 
Jag siktar på VG.

1. git add använder man för att lägga till sina modifierade eller nya filer i staging area,
   där de väntar på att bli committade. git commit använder man sedan för att spara/commita sina ändringar man
   lagt till i staging area i sitt lokala repository.

2. git pull kan man använda om man t.ex. står i sitt lokala repository och man ser att det skett
   några ändringar i en remote repository man jobbar mot för att uppdatera sitt lokala repository.
 
   git push använder man för att ladda upp sina commits/ändringar till en remote repository på t.ex. Github. 

3. git log använder man för att se alla commits som gjorts. Den visar även vem som commitat, 
   när det commitades och visar en hashkod för varje commit. 
   
   git status kan man använda för att se vad som behöver läggas till i staging area, eller 
   vad som ligger i staging area. Och om man ligger i fas med den repositoryn man jobbar mot.

4. Helst ska man ge en kort och koncis förklaring på vilka ändringar man gjort och varför i sin commit. 
   Både för att man ska kunna gå tillbaka senare och kolla vad och varför man gjorde en viss grej.
   Jobbar man i ett grupprojekt är det väldigt viktigt för att de andra ska se när, vad och varför man gjorde ändringar.

5. För att rulla tillbaka koden till ett tidigare tillstånd kan man använda t.ex. git revert och git reset. 
   git revert är bra om man vill ångra en specifik commit. Skriver jag t.ex.: git revert da607b2 kommer jag att 
   ta bort ändringarna jag gjorde i just den commiten. I mitt fall var det i den commiten jag skrev klart getReply() metoden
   i Guesser.java. Jag gjorde en ny branch för att testa om det funkade och det gjorde det. Jag fick meddelandet:

   [test df21194] Revert "getReply() method now asks user for input and returns a String if it equals T or F"
   
   Nu är getReply() metoden tillbaks till vad den var innan. Denna revert kan man se också om man skriver git log. 
   
   git reset är också väldigt effektiv, men man får vara lite mer försiktig med det kommandot. Det kommandot kan rulla tillbaka
   alla ändringar man gjort efter en viss commit. Man kan göra en soft, mixed och hard reset. 
   
   Först kan jag förklara hard reset. Om jag skriver: git reset --hard da607b2 tar jag bort alla commits/ändringar
   gjorda efter den commiten. Det kan vara bra om man vill ta bort alla ändringar man gjort efter en specifik commit.
   
   Jag gjorde en ny test branch och skrev: git reset --hard da607b2 och fick meddelandet:
  
   HEAD is now at da607b2 getReply() method now asks user for input and returns a String if it equals T or F
   
   Sedan var alla commits gjorda efter den här commiten borta. Inga ändringar i filer/koden har sparats.
   
   Det finns även något som kallas för soft reset. 
   Skriver jag: git reset --soft da607b2 går jag tillbaks till den commiten. Nu pekar master/HEAD alltså på commiten da607b2 och senare commits är borta.
   I staging area däremot så finns ändringarna man gjort efter den här commiten fortfarande kvar så du har inte förlorat någonting än. 
   Alltså, inga filer försvinner eller ändras när du kör soft reset och de läggs sedan automatiskt till i staging area. 
   Skriver jag nu t.ex. git commit -am "back to normal" så kan man säga att jag är tillbaka till där jag var innan jag gjorde en soft reset. 
   Kan vara användbart om t.ex. man inser att de tre senaste commitsen hade kunnat kombineras till en commit, kanske för att förtydliga något eller liknande.
   
   Sedan finns även mixed reset, den är default för git reset commandot. Skillnaden mellan hard och mixed är att om man kör mixed reset kommer 
   inte mixed reset påverka dina filer, precis som soft reset. Men skillnaden mot soft reset är att de inte läggs till i staging area per automatik.
   Så man får göra git add på de filer man vill ha med i nästa commit.
   
   
